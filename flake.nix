{
inputs = {
    nixpkgs.url = "github:nixpkgs-jdk-ea/nixpkgs/jdk-ea-25";
};
outputs = {self, nixpkgs, ...}:
  let
      systems = [ "x86_64-linux" "aarch64-linux" "aarch64-darwin" "x86_64-darwin" ];

      forEachSystem = f: builtins.listToAttrs (map (system: {
        name = system;
        value = f system;
      }) systems);

  in {
  packages = forEachSystem (system:
    let
      allowedUnfree = [ "graalvm-oracle" ]; # list of allowed unfree packages
      pkgs = import nixpkgs {
          inherit system;
          config.allowUnfreePredicate = pkg:
            builtins.elem (pkgs.lib.getName pkg) allowedUnfree;
      };
      secp256k1 = pkgs.secp256k1;
      graalvm = pkgs.graalvmPackages.graalvm-oracle_25-ea;
      gradle = pkgs.gradle_9.override {
        java = graalvm;         # Run Gradle with this JDK
      };
      makeWrapper = pkgs.makeWrapper;
      version = "0.2-SNAPSHOT";
      src = pkgs.fetchFromGitHub {
        owner = "bitcoinj";
        repo = "secp256k1-jdk";
        rev = "f0186ff23194d52cf507949d2d30d811a470e5a7"; # master 25-09-07
        sha256 = "sha256-dWzTgmMTwcwQaBXskhA9u2sU024SgkbsFsdFQdld6Vc=";
      };
    in {
      secp256k1-jdk =
        let
          mainProgram = "schnorr-example";
          jre = graalvm;  # JRE to run the example with

          self = pkgs.stdenv.mkDerivation (_finalAttrs: {
            inherit version src;
            pname = "secp256k1-jdk";
            meta.mainProgram = mainProgram;

            nativeBuildInputs = [gradle makeWrapper secp256k1];

            mitmCache = gradle.fetchDeps {
              pkg = self;
              # update or regenerate this by running
              #  $(nix build .#secp256k1-jdk.mitmCache.updateScript --print-out-paths)
              data = ./deps.json;
            };

            preBuild = ''
              export JAVA_TOOL_OPTIONS=-Djava.library.path=${secp256k1}/lib
            '';

            gradleBuildTask = "secp-examples-java:installDist";

            gradleFlags = [ "--info --stacktrace" ];

            # will run the gradleCheckTask (defaults to "test")
            doCheck = false;

            # TODO: The list of JARs in --module-path is hard-coded
            installPhase = ''
              mkdir -p $out/{bin,share/secp256k1-jdk/libs,share/${mainProgram}/libs}
              cp secp-api/build/libs/*.jar $out/share/secp256k1-jdk/libs
              cp secp-bouncy/build/libs/*.jar $out/share/secp256k1-jdk/libs
              cp secp-ffm/build/libs/*.jar $out/share/secp256k1-jdk/libs
              cp secp-examples-java/build/install/schnorr-example/lib/*.jar $out/share/${mainProgram}/libs

              makeWrapper ${jre}/bin/java $out/bin/${mainProgram} \
                --add-flags "--enable-native-access=org.bitcoinj.secp.ffm" \
                --add-flags "-Djava.library.path=${secp256k1}/lib" \
                --add-flags "--module-path $out/share/${mainProgram}/libs/jspecify-1.0.0.jar:$out/share/${mainProgram}/libs/nativeimage-24.0.0.jar:$out/share/${mainProgram}/libs/word-24.0.0.jar:$out/share/${mainProgram}/libs/secp-api-${version}.jar:$out/share/${mainProgram}/libs/secp-examples-java-${version}.jar:$out/share/${mainProgram}/libs/secp-ffm-${version}.jar:$out/share/${mainProgram}/libs/secp-graalvm-${version}.jar" \
                --add-flags "--module org.bitcoinj.secp.examples/org.bitcoinj.secp.examples.Schnorr"
            '';
          });
        in
          self;
      secp256k1-jdk-native =
        let
          mainProgram = "schnorr-example-native";

          self = pkgs.stdenv.mkDerivation (_finalAttrs: {
            inherit version src;
            pname = "secp256k1-jdk-native";
            meta.mainProgram = mainProgram;

            nativeBuildInputs = [gradle makeWrapper secp256k1 graalvm];

            mitmCache = gradle.fetchDeps {
              pkg = self;
              # This can use deps.json generated by/for the JRE-basd package, see above for update instructions
              data = ./deps.json;
            };

            preBuild = ''
              export GRAALVM_HOME=${graalvm}
              export JAVA_TOOL_OPTIONS=-Djava.library.path=${secp256k1}/lib
            '';

            gradleBuildTask = "build secp-examples-java:nativeCompileSchnorr";

            gradleFlags = [ "--info --stacktrace" ];

            # will run the gradleCheckTask (defaults to "test")
            doCheck = false;

            installPhase = ''
              mkdir -p $out/bin
              cp secp-examples-java/build/schnorr-example $out/bin/${mainProgram}
              wrapProgram $out/bin/${mainProgram} --prefix DYLD_LIBRARY_PATH : "${pkgs.secp256k1}/lib"
            '';
          });
        in
          self;
    });
  };
}
